// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Models;
//
//    var imageOne = ImageOne.FromJson(jsonString);

namespace ImageOSINT.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ImageOne
    {
        [JsonProperty("serp-item", Required = Required.Always)]
        public SerpItem SerpItem { get; set; }
    }

    public partial class SerpItem
    {
        [JsonProperty("reqid", Required = Required.Always)]
        public string Reqid { get; set; }

        [JsonProperty("freshness", Required = Required.Always)]
        public string Freshness { get; set; }

        [JsonProperty("preview", Required = Required.Always)]
        public List<Preview> Preview { get; set; }

        [JsonProperty("dups", Required = Required.Always)]
        public List<Dup> Dups { get; set; }

        [JsonProperty("thumb", Required = Required.Always)]
        public Thumb Thumb { get; set; }

        [JsonProperty("snippet", Required = Required.Always)]
        public Snippet Snippet { get; set; }

        [JsonProperty("detail_url", Required = Required.Always)]
        public string DetailUrl { get; set; }

        [JsonProperty("img_href", Required = Required.Always)]
        public Uri ImgHref { get; set; }

        [JsonProperty("useProxy", Required = Required.Always)]
        public bool UseProxy { get; set; }

        [JsonProperty("pos", Required = Required.Always)]
        public long Pos { get; set; }

        [JsonProperty("id", Required = Required.Always)]
        public string Id { get; set; }

        [JsonProperty("rimId", Required = Required.Always)]
        public string RimId { get; set; }

        [JsonProperty("docid", Required = Required.Always)]
        public string Docid { get; set; }

        [JsonProperty("greenUrlCounterPath", Required = Required.Always)]
        public string GreenUrlCounterPath { get; set; }

        [JsonProperty("isMarketIncut", Required = Required.Always)]
        public bool IsMarketIncut { get; set; }

        [JsonProperty("counterPath", Required = Required.Always)]
        public string CounterPath { get; set; }
    }

    public partial class Dup
    {
        [JsonProperty("url", Required = Required.Always)]
        public Uri Url { get; set; }

        [JsonProperty("fileSizeInBytes", Required = Required.Always)]
        public long FileSizeInBytes { get; set; }

        [JsonProperty("w", Required = Required.Always)]
        public long W { get; set; }

        [JsonProperty("h", Required = Required.Always)]
        public long H { get; set; }

        [JsonProperty("origin", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Preview Origin { get; set; }

        [JsonProperty("isMixedImage", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsMixedImage { get; set; }
    }

    public partial class Preview
    {
        [JsonProperty("w", Required = Required.Always)]
        public long W { get; set; }

        [JsonProperty("h", Required = Required.Always)]
        public long H { get; set; }

        [JsonProperty("url", Required = Required.Always)]
        public Uri Url { get; set; }

        [JsonProperty("fileSizeInBytes", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? FileSizeInBytes { get; set; }
    }

    public partial class Snippet
    {
        [JsonProperty("title", Required = Required.Always)]
        public string Title { get; set; }

        [JsonProperty("hasTitle", Required = Required.Always)]
        public bool HasTitle { get; set; }

        [JsonProperty("text", Required = Required.Always)]
        public string Text { get; set; }

        [JsonProperty("url", Required = Required.Always)]
        public Uri Url { get; set; }

        [JsonProperty("domain", Required = Required.Always)]
        public string Domain { get; set; }

        [JsonProperty("redirUrl", Required = Required.Always)]
        public Uri RedirUrl { get; set; }

        [JsonProperty("shopScore", Required = Required.Always)]
        public long ShopScore { get; set; }
    }

    public partial class Thumb
    {
        [JsonProperty("url", Required = Required.Always)]
        public string Url { get; set; }

        [JsonProperty("size", Required = Required.Always)]
        public Size Size { get; set; }
    }

    public partial class Size
    {
        [JsonProperty("width", Required = Required.Always)]
        public long Width { get; set; }

        [JsonProperty("height", Required = Required.Always)]
        public long Height { get; set; }
    }

    public partial class ImageOne
    {
        public static ImageOne FromJson(string json) => JsonConvert.DeserializeObject<ImageOne>(json, Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ImageOne self) => JsonConvert.SerializeObject(self, Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
